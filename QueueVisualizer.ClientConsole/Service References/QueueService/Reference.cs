//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.33440
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QueueVisualizer.ClientConsole.QueueService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="QueueService.IQueueServiceContract")]
    public interface IQueueServiceContract {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IQueueServiceContract/GetAll", ReplyAction="http://tempuri.org/IQueueServiceContract/GetAllResponse")]
        QueueVisualizer.SoapService.Models.QueueOperationResponse GetAll(QueueVisualizer.SoapService.Models.QueueOperationRequest entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IQueueServiceContract/GetAll", ReplyAction="http://tempuri.org/IQueueServiceContract/GetAllResponse")]
        System.Threading.Tasks.Task<QueueVisualizer.SoapService.Models.QueueOperationResponse> GetAllAsync(QueueVisualizer.SoapService.Models.QueueOperationRequest entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IQueueServiceContract/Purge", ReplyAction="http://tempuri.org/IQueueServiceContract/PurgeResponse")]
        void Purge(QueueVisualizer.SoapService.Models.QueueOperationRequest entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IQueueServiceContract/Purge", ReplyAction="http://tempuri.org/IQueueServiceContract/PurgeResponse")]
        System.Threading.Tasks.Task PurgeAsync(QueueVisualizer.SoapService.Models.QueueOperationRequest entity);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IQueueServiceContractChannel : QueueVisualizer.ClientConsole.QueueService.IQueueServiceContract, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class QueueServiceContractClient : System.ServiceModel.ClientBase<QueueVisualizer.ClientConsole.QueueService.IQueueServiceContract>, QueueVisualizer.ClientConsole.QueueService.IQueueServiceContract {
        
        public QueueServiceContractClient() {
        }
        
        public QueueServiceContractClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public QueueServiceContractClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public QueueServiceContractClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public QueueServiceContractClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public QueueVisualizer.SoapService.Models.QueueOperationResponse GetAll(QueueVisualizer.SoapService.Models.QueueOperationRequest entity) {
            return base.Channel.GetAll(entity);
        }
        
        public System.Threading.Tasks.Task<QueueVisualizer.SoapService.Models.QueueOperationResponse> GetAllAsync(QueueVisualizer.SoapService.Models.QueueOperationRequest entity) {
            return base.Channel.GetAllAsync(entity);
        }
        
        public void Purge(QueueVisualizer.SoapService.Models.QueueOperationRequest entity) {
            base.Channel.Purge(entity);
        }
        
        public System.Threading.Tasks.Task PurgeAsync(QueueVisualizer.SoapService.Models.QueueOperationRequest entity) {
            return base.Channel.PurgeAsync(entity);
        }
    }
}
